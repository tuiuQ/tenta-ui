
.@{row} {
  .box-sizing();
  min-height: 1px;
  clear: both;

  &:before,
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// 列基础css
.col-base-css() {
  .box-sizing();
  position: relative;
  min-height: 1px;
}

// 循环列，设置基础css
.make-grid-col(@grid-count);

.make-grid-col(@len: @grid-count) {
  .col(@i) {
    @classList: ~"
      .@{col-name}-xs-@{i},
      .@{col-name}-sm-@{i},
      .@{col-name}-md-@{i},
      .@{col-name}-lg-@{i}
    ";
    .col(@i + 1, ~"@{classList}");
  }

  .col(@i, @list) when (@i =< @len) {
    @classList: ~"
      .@{col-name}-xs-@{i},
      .@{col-name}-sm-@{i},
      .@{col-name}-md-@{i},
      .@{col-name}-lg-@{i}
    ";
    .col(@i + 1, ~"@{classList},@{list}");
  }

  .col(@i, @list) when (@i > @len) {
    @{list} {
      .col-base-css();
    }
  }
  .col(1)
}


// 循环生成列
.make-col-loop(xs, @grid-count);

.make-col-loop(@type, @n, @i: 1) when (@i <= @n) {
  @col-class-name: ~"@{col-name}-@{type}";
  .@{col-class-name}-@{i} {
    width: @i / @n * 100%;
    float: left;
  }

  // 偏移
  .@{col-class-name}-offset-@{i} {
    margin-left: @i / @n * 100%;
  }

  // 推
  .@{col-class-name}-push-@{i} {
    left: @i / @n * 100%;
  }

  // 拉
  .@{col-class-name}-pull-@{i} {
    right: @i / @n * 100%;
  }

  .make-col-loop(@type, @n, (@i + 1));
}

@media (min-width: @sm) {
  .make-col-loop(sm, @grid-count);
}
@media (min-width: @md) {
  .make-col-loop(md, @grid-count);
}
@media (min-width: @lg) {
  .make-col-loop(lg, @grid-count);
}
